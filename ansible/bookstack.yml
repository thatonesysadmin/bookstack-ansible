#88888888ba                                    88  88                           
#88      "8b                                   88  88                           
#88      ,8P                                   88  88                           
#88aaaaaa8P'  8b,dPPYba,  ,adPPYYba,   ,adPPYb,88  88   ,adPPYba,  8b       d8  
#88""""""8b,  88P'   "Y8  ""     `Y8  a8"    `Y88  88  a8P_____88  `8b     d8'  
#88      `8b  88          ,adPPPPP88  8b       88  88  8PP"""""""   `8b   d8'   
#88      a8P  88          88,    ,88  "8a,   ,d88  88  "8b,   ,aa    `8b,d8'    
#88888888P"   88          `"8bbdP"Y8   `"8bbdP"Y8  88   `"Ybbd8"'      Y88'     
#
#
#                                                                            88           88             
#                                              ,d                     ,d     88           ""             
#                                              88                     88     88                          
#8b      db      d8  8b,dPPYba,   ,adPPYba,  MM88MMM  ,adPPYba,     MM88MMM  88,dPPYba,   88  ,adPPYba,  
#`8b    d88b    d8'  88P'   "Y8  a8"     "8a   88    a8P_____88       88     88P'    "8a  88  I8[    ""  
# `8b  d8'`8b  d8'   88          8b       d8   88    8PP"""""""       88     88       88  88   `"Y8ba,   
#  `8bd8'  `8bd8'    88          "8a,   ,a8"   88,   "8b,   ,aa       88,    88       88  88  aa    ]8I  
#    YP      YP      88           `"YbbdP"'    "Y888  `"Ybbd8"'       "Y888  88       88  88  `"YbbdP"'  


---
- hosts: all
  become: true

  tasks:
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
    
    - name: Install Nginx web server
      become: true
      apt:
        name: nginx
        state: latest
      tags: [web]

    - name: Install Mysql server
      apt: name=mysql-server update_cache=yes state=latest force_apt_get=yes
      tags: [db]

    - name: Install the Python MySQLB module 
      apt: name=python3-mysqldb
      tags: [db]
    
    - name: Add PHP repository 
      become: true
      apt_repository:
        repo: 'ppa:ondrej/php'
      tags: [php]
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
       update_cache: yes
      tags: [php]
    - name: Install PHP packages
      become: true
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - php7.1-cli
        - php7.1-curl
        - php7.1-fpm
        - php7.1-intl
        - php7.1-mysql
        - php7.1-common
        - php7.1-xml
        - php7.1-tidy
        - php7.1-mcrypt
        - php7.1-xmlrpc
        - php7.1-mbstring
        - php7.1-gd
      tags: [php]

    - name: Install problematic PHP packages that dont want to install from above
      apt: name ={{ item }} update_cache=yes state=latest
      loop: ['php7.1-sqlite', 'php7.1-zi']
      tags: [php]
    
    - name: Install usefull stuff
      apt: name={{ item }} update_cache=yes state=latest
      loop: ['nano', 'ufw', 'iperf', 'iperf3', 'apache2-utils', 'git']
      tags: [system]

    - name: Update php.ini post_max_size
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^file_uploads.*$'
        replace: 'file_uploads = On'
        backup: yes 
      tags: [php]

    - name: Update php.ini file_uploads
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^file_uploads.*$'
        replace: 'file_uploads = Off'
        backup: yes 
      tags: [php]

    - name: Update php.ini allow_url_fopen
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^allow_url_fopen.*$'
        replace: 'allow_url_fopen = On'
        backup: yes 
      tags: [php]

    - name: Update php.ini memory_limit
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^memory_limit.*$'
        replace: 'memory_limit = 256M'
        backup: yes 
      tags: [php]

    - name: Update php.ini upload_max_filesize
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^upload_max_filesize.*$'
        replace: 'upload_max_filesize = 100M'
        backup: yes 
      tags: [php]

    - name: Update php.ini cgi.fix_pathinfo
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^cgi.fix_pathinfo.*$'
        replace: 'cgi.fix_pathinfo = 0'
        backup: yes 
      tags: [php]

    - name: Update php.ini max_execution_time
      replace:
        dest: "/etc/php/7.1/fpm/php.ini"
        regexp: '^max_execution_time.*$'
        replace: 'max_execution_time = 360'
        backup: yes 
      tags: [php]

    - name: Set the root password because bros dont let bros not have root passwords
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysqll]

    - name: remove anon users as bro's dont let bros have anon users in ther databases'
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: remove test database because bros dont let bros have test databases
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: create a database for bookstack to use
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for bookstack
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Download Composer and ensure it's legit
      script: scripts/inscomp.sh
      tags: [composer]


    - name: Move composer so we can call it anywhere
      become: true
      command: mv composer.phar /usr/local/bin/composer
      tags: [composer]

    - git:
       repo: 'https://github.com/BookStackApp/BookStack.git'
       dest: /var/www/Bookstack
       version: release
      tags: [git]
    
    - composer:
        command: install
        working_dir: /var/www/Bookstack
      tags: [composerinstall]

    - name: Set up .env file
      template:
        src: "files/env.j2"
        dest: "/var/www/Bookstack/.env"
      tags: [artis]

    - name: Run php artisan key generate
      shell: php /var/www/Bookstack/artisan key:generate --force
      tags: [artis]

    - name: Run php artisan migrate
      shell: php /var/www/Bookstack/artisan migrate --force
      tags: [migrate]

   # - name: Recursively change ownership of a directory
   #   file:
   #     path: "/var/www/Bookstack"
   #     state: directory
   #     recurse: yes
   #     owner: www-data
   #     group: www-date
   #     become: true
        

   # - name: Ensure directories are 755
    #  command: find /var/www/Bookstack -type d -exec chmod 755 {} \;
    #  tags: [janky]

    #- find:
    #    path: /var/www/Bookstack
    #    file_type: file
    #    recurse: yes
    #  register: find_result
    #  tags: [jank]
    - file:
        path: "/var/www/Bookstack"
        recurse: yes
        owner: www-data
        group: www-data
       # mode: 0444
      #with_items: "{{ find_result.files }}"
      tags: [jank1]